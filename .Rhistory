decisao_texto_integral)
#### categorical variable for the decision
md_table$decisao_disponivel <- if_else(!is.na(decisao_texto_integral),
"texto integral",
if_else(!is.na(decisao_texto_parcial),
"texto parcial",
"texto nao disponivel"))
paste0("dec_corpus/",
str_extract(case_page, "(?<=pt\\/).*?(?=\\.nsf)"),
"_",
str_replace_all(proc, "[[:punct:]]", "_"),
".txt"
)
#### Generate a corpus id
corpus_id <- paste0("dec_corpus/",
str_extract(case_page, "(?<=pt\\/).*?(?=\\.nsf)"),
"_",
str_replace_all(proc, "[[:punct:]]", "_"),
".txt"
)
main_dir <- getwd()
setwd(paste0(main_dir, "/getAndClean"))
decision_data_raw <- map2(head(metadata_rel$case_page, 30), head(metadata_rel$proc, 30), function(case_page, proc){
cat(paste0("\n\n\n", "scraping case ", proc, "\n\n\n"))
## check the internet conection, and wait if it is weak. If not, just parse the HTML page
con_test <- try(parsed_case_page <- case_page %>%
read_html(), silent = TRUE)
# if true, weak connection...wait 1 minute, and then reconnect and parse the HTML page
if(class(con_test) == "try-error") {
print("reconecting in 1 minute!")
Sys.sleep(60)
parsed_case_page <- case_page %>%
read_html()
}
### scrape the case details table
md_table <- try(parsed_case_page %>%
html_nodes(xpath = "//table") %>%
html_table(fill = TRUE) %>%
`[[`(1) %>%
as_tibble() %>%
filter(str_detect(X1, "\\:$")) %>%
t() %>%
as_tibble() %>%
set_names(.,
nm = .[1,] %>%
str_replace_all(., "[[:punct:]]|º", "") %>%
str_to_lower() %>%
str_replace_all(., "\\s+", "_")) %>%
slice(2) %>%
mutate_all(funs(str_replace_all(., "[[:cntrl:]]", "; "))) %>%
mutate(proc = proc) %>%
select(., one_of(c("processo",
"relator",
"data_do_acordão",
"data_do_acordao",
"tribunal_recorrido",
"tribunal_recurso",
"data_dec_recorrida",
"área_tematica",
"área_temática",
"area_tematica",
"descritores",
"meio_processual",
"legislação_nacional",
"legislaçao_nacional",
"jurisprudência_nacional",
"jurisprudencia_nacional",
"decisão",
"decisao",
"votação",
"votaçao",
"votacão",
"votacao",
"n_convencional",
"sumário",
"sumario",
"privacidade",
"n_do_documento",
"reclamações",
"reclamacões",
"reclamaçoes",
"reclamacoes",
"indicações_eventuais",
"indicaçoes_eventuais",
"indicacoes_eventuais",
"indicacões_eventuais",
"processo_no_tribunal_recorrido"))),
silent = TRUE)
## if md_table is empty, assign NA
if(class(md_table) == "try-error" ||is_empty(md_table) || ncol(md_table) < 2){
md_table <- NA_character_
}
### Next, we get the integral or partial decisions, when existing. If not, assign NA
### partial
decisao_texto_parcial <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Parcial')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_parcial <- ifelse(is_empty(decisao_texto_parcial) || nchar(decisao_texto_parcial) < 5,
NA_character_,
decisao_texto_parcial)
### integral
decisao_texto_integral <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Integral')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_integral <- ifelse(is_empty(decisao_texto_integral) || nchar(decisao_texto_integral) < 5,
NA_character_,
decisao_texto_integral)
#### categorical variable for the decision
md_table$decisao_disponivel <- if_else(!is.na(decisao_texto_integral),
"texto integral",
if_else(!is.na(decisao_texto_parcial),
"texto parcial",
"texto nao disponivel"))
#### Generate a corpus id
corpus_id <- paste0("dec_corpus/",
str_extract(case_page, "(?<=pt\\/).*?(?=\\.nsf)"),
"_",
str_replace_all(proc, "[[:punct:]]", "_"),
".txt"
)
### assign corpus id to the dataset
md_table$corpus_id <- corpus_id
### store the decision text in the corpus
if(md_table$decisao_disponivel == "texto integral"){
cat(decisao_texto_integral,
file = corpus_id)
} else if(md_table$decisao_disponivel == "texto parcial"){
cat(decisao_texto_integral,
file = corpus_id)
} else {
cat("Decisao nao publicada",
file = corpus_id)
}
print(md_table[,sample(1:ncol(case_table), 4)])
return(md_table)
Sys.sleep(sample(1:6, 1))
})
decision_data_raw <- map2(head(metadata_rel$case_page, 30), head(metadata_rel$proc, 30), function(case_page, proc){
cat(paste0("\n\n\n", "scraping case ", proc, "\n\n\n"))
## check the internet conection, and wait if it is weak. If not, just parse the HTML page
con_test <- try(parsed_case_page <- case_page %>%
read_html(), silent = TRUE)
# if true, weak connection...wait 1 minute, and then reconnect and parse the HTML page
if(class(con_test) == "try-error") {
print("reconecting in 1 minute!")
Sys.sleep(60)
parsed_case_page <- case_page %>%
read_html()
}
### scrape the case details table
md_table <- try(parsed_case_page %>%
html_nodes(xpath = "//table") %>%
html_table(fill = TRUE) %>%
`[[`(1) %>%
as_tibble() %>%
filter(str_detect(X1, "\\:$")) %>%
t() %>%
as_tibble() %>%
set_names(.,
nm = .[1,] %>%
str_replace_all(., "[[:punct:]]|º", "") %>%
str_to_lower() %>%
str_replace_all(., "\\s+", "_")) %>%
slice(2) %>%
mutate_all(funs(str_replace_all(., "[[:cntrl:]]", "; "))) %>%
mutate(proc = proc) %>%
select(., one_of(c("processo",
"relator",
"data_do_acordão",
"data_do_acordao",
"tribunal_recorrido",
"tribunal_recurso",
"data_dec_recorrida",
"área_tematica",
"área_temática",
"area_tematica",
"descritores",
"meio_processual",
"legislação_nacional",
"legislaçao_nacional",
"jurisprudência_nacional",
"jurisprudencia_nacional",
"decisão",
"decisao",
"votação",
"votaçao",
"votacão",
"votacao",
"n_convencional",
"sumário",
"sumario",
"privacidade",
"n_do_documento",
"reclamações",
"reclamacões",
"reclamaçoes",
"reclamacoes",
"indicações_eventuais",
"indicaçoes_eventuais",
"indicacoes_eventuais",
"indicacões_eventuais",
"processo_no_tribunal_recorrido"))),
silent = TRUE)
## if md_table is empty, assign NA
if(class(md_table) == "try-error" ||is_empty(md_table) || ncol(md_table) < 2){
md_table <- NA_character_
}
### Next, we get the integral or partial decisions, when existing. If not, assign NA
### partial
decisao_texto_parcial <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Parcial')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_parcial <- ifelse(is_empty(decisao_texto_parcial) || nchar(decisao_texto_parcial) < 5,
NA_character_,
decisao_texto_parcial)
### integral
decisao_texto_integral <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Integral')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_integral <- ifelse(is_empty(decisao_texto_integral) || nchar(decisao_texto_integral) < 5,
NA_character_,
decisao_texto_integral)
#### categorical variable for the decision
md_table$decisao_disponivel <- if_else(!is.na(decisao_texto_integral),
"texto integral",
if_else(!is.na(decisao_texto_parcial),
"texto parcial",
"texto nao disponivel"))
#### Generate a corpus id
corpus_id <- paste0("dec_corpus/",
str_extract(case_page, "(?<=pt\\/).*?(?=\\.nsf)"),
"_",
str_replace_all(proc, "[[:punct:]]", "_"),
".txt"
)
### assign corpus id to the dataset
md_table$corpus_id <- corpus_id
### store the decision text in the corpus
if(md_table$decisao_disponivel == "texto integral"){
cat(decisao_texto_integral,
file = corpus_id)
} else if(md_table$decisao_disponivel == "texto parcial"){
cat(decisao_texto_integral,
file = corpus_id)
} else {
cat("Decisao nao publicada",
file = corpus_id)
}
print(md_table[,sample(1:ncol(md_table), 4)])
return(md_table)
Sys.sleep(sample(1:6, 1))
})
decisao_texto_integral
corpus_id
readtext::readtext("dec_corpus/jtre_103_14_4T9LLE_E1.txt")
readtext::readtext("dec_corpus/jtre_103_14_4T9LLE_E1.txt")$text
q()
q()
main_dir <- getwd()
setwd(paste0(main_dir, "/getAndClean"))
### loading the relevant packages
library(tidyverse)
library(rvest)
library(openxlsx)
library(lubridate)
library(RSelenium)
library(data.table)
1
double(1)
double(2)
double(3)
double(0.1)
numeric(1)
decision_data_raw <- map2(metadata_rel$case_page, metadata_rel$proc, function(case_page, proc){
cat(paste0("\n\n\n", "scraping case ", proc, "\n\n\n"))
## check the internet conection, and wait if it is weak. If not, just parse the HTML page
con_test <- try(parsed_case_page <- case_page %>%
read_html(), silent = TRUE)
# if true, weak connection...wait 1 minute, and then reconnect and parse the HTML page
if(class(con_test) == "try-error") {
print("reconecting in 1 minute!")
Sys.sleep(60)
parsed_case_page <- case_page %>%
read_html()
}
### scrape the case details table
md_table <- try(parsed_case_page %>%
html_nodes(xpath = "//table") %>%
html_table(fill = TRUE) %>%
`[[`(1) %>%
as_tibble() %>%
filter(str_detect(X1, "\\:$")) %>%
t() %>%
as_tibble() %>%
set_names(.,
nm = .[1,] %>%
str_replace_all(., "[[:punct:]]|º", "") %>%
str_to_lower() %>%
str_replace_all(., "\\s+", "_")) %>%
slice(2) %>%
mutate_all(funs(str_replace_all(., "[[:cntrl:]]", "; "))) %>%
mutate(proc = proc) %>%
select(., one_of(c("processo",
"relator",
"data_do_acordão",
"data_do_acordao",
"tribunal_recorrido",
"tribunal_recurso",
"data_dec_recorrida",
"área_tematica",
"área_temática",
"area_tematica",
"descritores",
"meio_processual",
"legislação_nacional",
"legislaçao_nacional",
"jurisprudência_nacional",
"jurisprudencia_nacional",
"decisão",
"decisao",
"votação",
"votaçao",
"votacão",
"votacao",
"n_convencional",
"sumário",
"sumario",
"privacidade",
"n_do_documento",
"reclamações",
"reclamacões",
"reclamaçoes",
"reclamacoes",
"indicações_eventuais",
"indicaçoes_eventuais",
"indicacoes_eventuais",
"indicacões_eventuais",
"processo_no_tribunal_recorrido"))),
silent = TRUE)
## if md_table is empty, assign NA
if(class(md_table) == "try-error" ||is_empty(md_table) || ncol(md_table) < 2){
md_table <- NA_character_
}
### Next, we get the integral or partial decisions, when existing. If not, assign NA
### partial
decisao_texto_parcial <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Parcial')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_parcial <- ifelse(is_empty(decisao_texto_parcial) || nchar(decisao_texto_parcial) < 5,
NA_character_,
decisao_texto_parcial)
### integral
decisao_texto_integral <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Integral')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_integral <- ifelse(is_empty(decisao_texto_integral) || nchar(decisao_texto_integral) < 5,
NA_character_,
decisao_texto_integral)
#### categorical variable for the decision
md_table$decisao_disponivel <- if_else(!is.na(decisao_texto_integral),
"texto integral",
if_else(!is.na(decisao_texto_parcial),
"texto parcial",
"texto nao disponivel"))
### assign corpus id to the dataset
md_table$corpus_id <- corpus_id
### store the decision text in the corpus
if(md_table$decisao_disponivel == "texto integral"){
cat(decisao_texto_integral,
file = corpus_id)
} else if(md_table$decisao_disponivel == "texto parcial"){
cat(decisao_texto_integral,
file = corpus_id)
} else {
cat("Decisao nao publicada",
file = corpus_id)
}
print(md_table[,sample(1:ncol(md_table), 4)])
# rest time for the server
Sys.sleep(sample(1:6, 1))
return(md_table)
})
## export it
save(decision_data_raw,
file = "interm_data/decision_metadata_raw.Rdata")
decision_data_raw <- map2(metadata_rel$case_page, metadata_rel$proc, function(case_page, proc){
cat(paste0("\n\n\n", "scraping case ", proc, "\n\n\n"))
## check the internet conection, and wait if it is weak. If not, just parse the HTML page
con_test <- try(parsed_case_page <- case_page %>%
read_html(), silent = TRUE)
# if true, weak connection...wait 1 minute, and then reconnect and parse the HTML page
if(class(con_test) == "try-error") {
print("reconecting in 1 minute!")
Sys.sleep(60)
parsed_case_page <- case_page %>%
read_html()
}
### scrape the case details table
md_table <- try(parsed_case_page %>%
html_nodes(xpath = "//table") %>%
html_table(fill = TRUE) %>%
`[[`(1) %>%
as_tibble() %>%
filter(str_detect(X1, "\\:$")) %>%
t() %>%
as_tibble() %>%
set_names(.,
nm = .[1,] %>%
str_replace_all(., "[[:punct:]]|º", "") %>%
str_to_lower() %>%
str_replace_all(., "\\s+", "_")) %>%
slice(2) %>%
mutate_all(funs(str_replace_all(., "[[:cntrl:]]", "; "))) %>%
mutate(proc = proc) %>%
select(., one_of(c("processo",
"relator",
"data_do_acordão",
"data_do_acordao",
"tribunal_recorrido",
"tribunal_recurso",
"data_dec_recorrida",
"área_tematica",
"área_temática",
"area_tematica",
"descritores",
"meio_processual",
"legislação_nacional",
"legislaçao_nacional",
"jurisprudência_nacional",
"jurisprudencia_nacional",
"decisão",
"decisao",
"votação",
"votaçao",
"votacão",
"votacao",
"n_convencional",
"sumário",
"sumario",
"privacidade",
"n_do_documento",
"reclamações",
"reclamacões",
"reclamaçoes",
"reclamacoes",
"indicações_eventuais",
"indicaçoes_eventuais",
"indicacoes_eventuais",
"indicacões_eventuais",
"processo_no_tribunal_recorrido"))),
silent = TRUE)
## if md_table is empty, assign NA
if(class(md_table) == "try-error" ||is_empty(md_table) || ncol(md_table) < 2){
md_table <- NA_character_
}
### Next, we get the integral or partial decisions, when existing. If not, assign NA
### partial
decisao_texto_parcial <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Parcial')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_parcial <- ifelse(is_empty(decisao_texto_parcial) || nchar(decisao_texto_parcial) < 5,
NA_character_,
decisao_texto_parcial)
### integral
decisao_texto_integral <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Integral')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_integral <- ifelse(is_empty(decisao_texto_integral) || nchar(decisao_texto_integral) < 5,
NA_character_,
decisao_texto_integral)
#### categorical variable for the decision
md_table$decisao_disponivel <- if_else(!is.na(decisao_texto_integral),
"texto integral",
if_else(!is.na(decisao_texto_parcial),
"texto parcial",
"texto nao disponivel"))
#### Generate a corpus id
corpus_id <- paste0("dec_corpus/",
str_extract(case_page, "(?<=pt\\/).*?(?=\\.nsf)"),
"_",
str_replace_all(proc, "[[:punct:]]", "_"),
".txt")
### assign corpus id to the dataset
md_table$corpus_id <- corpus_id
### store the decision text in the corpus
if(md_table$decisao_disponivel == "texto integral"){
cat(decisao_texto_integral,
file = corpus_id)
} else if(md_table$decisao_disponivel == "texto parcial"){
cat(decisao_texto_integral,
file = corpus_id)
} else {
cat("Decisao nao publicada",
file = corpus_id)
}
print(md_table[,sample(1:ncol(md_table), 4)])
# rest time for the server
Sys.sleep(sample(1:6, 1))
return(md_table)
})
## export it
save(decision_data_raw,
file = "interm_data/decision_metadata_raw.Rdata")
q()

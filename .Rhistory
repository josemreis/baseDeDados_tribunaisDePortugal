if(file.exists(paste0("dec_corpus/md_", corpus_id, "csv")) == FALSE){
## check the internet conection, and wait if it is weak. If not, just parse the HTML page
con_test <- try(parsed_case_page <- case_page %>%
read_html(), silent = TRUE)
# if true, weak connection...wait 1 minute, and then reconnect and parse the HTML page
if(class(con_test) == "try-error") {
print("reconecting in 1 minute!")
Sys.sleep(60)
parsed_case_page <- case_page %>%
read_html()
}
### scrape the case details table
md_table <- try(parsed_case_page %>%
html_node(xpath = "//table") %>%
html_table(fill = TRUE) %>%
as_tibble() %>%
filter(str_detect(X1, "\\:$")) %>%
t() %>%
as_tibble() %>%
set_names(.,
nm = .[1,] %>%
str_replace_all(., "[[:punct:]]|º", "") %>%
str_to_lower() %>%
str_replace_all(., "\\s+", "_")) %>%
slice(2) %>%
mutate_all(funs(str_replace_all(., "[[:cntrl:]]", "; "))) %>%
mutate(proc = proc,
case_page = case_page) %>%
select(., one_of(c("processo",
"relator",
"data_do_acordão",
"data_do_acordao",
"tribunal_recorrido",
"tribunal_recurso",
"data_dec_recorrida",
"área_tematica",
"área_temática",
"area-+_tematica",
"descritores",
"meio_processual",
"legislação_nacional",
"legislaçao_nacional",
"jurisprudência_nacional",
"jurisprudencia_nacional",
"decisão",
"decisao",
"votação",
"votaçao",
"votacão",
"votacao",
"n_convencional",
"sumário",
"sumario",
"privacidade",
"n_do_documento",
"reclamações",
"reclamacões",
"reclamaçoes",
"reclamacoes",
"indicações_eventuais",
"indicaçoes_eventuais",
"indicacoes_eventuais",
"indicacões_eventuais",
"processo_no_tribunal_recorrido"))),
silent = TRUE)
## if md_table is empty, assign NA
if(class(md_table) == "try-error" ||is_empty(md_table) || ncol(md_table) < 2){
md_table <- NA_character_
}
### Next, we get the integral or partial decisions, when existing. If not, assign NA
### partial
decisao_texto_parcial <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Parcial')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_parcial <- ifelse(is_empty(decisao_texto_parcial) || nchar(decisao_texto_parcial) < 5,
NA_character_,
decisao_texto_parcial)
### integral
decisao_texto_integral <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Integral')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_integral <- ifelse(is_empty(decisao_texto_integral) || nchar(decisao_texto_integral) < 5,
NA_character_,
decisao_texto_integral)
#### categorical variable for the decision
md_table$decisao_disponivel <- if_else(!is.na(decisao_texto_integral),
"texto integral",
if_else(!is.na(decisao_texto_parcial),
"texto parcial",
"texto nao disponivel"))
### assign corpus id to the dataset
md_table$corpus_id <- paste0("dec_corpus/dec_", corpus_id, "txt")
### store the decision text in the corpus
if(md_table$decisao_disponivel == "texto integral"){
cat(decisao_texto_integral,
file = paste0("dec_corpus/dec_", corpus_id, "txt"))
} else if(md_table$decisao_disponivel == "texto parcial"){
cat(decisao_texto_integral,
file = paste0("dec_corpus/dec_", corpus_id, "txt"))
} else {
cat("Decisao nao publicada",
file = paste0("dec_corpus/dec_", corpus_id, "txt"))
}
#### Export the metadata table as .csv
write.csv(md_table,
fileEncoding = "UTF-8",
row.names = FALSE,
file = paste0("dec_corpus/md_", corpus_id, "csv"))
# rest time for the server
Sys.sleep(sample(1:6, 1))
} else {
cat("\n---> already parsed and saved!\n")
}
})
q()
map2(metadata_rel$case_page, metadata_rel$proc, function(case_page, proc){
#### Generate a corpus id
corpus_id <- paste0(str_extract(case_page, "(?<=pt\\/).*?(?=\\.nsf)"),
"_",
str_replace_all(proc, "[[:punct:]]", "_"),
".")
## start
cat(paste0("\n", "scraping case ", proc, "\n"))
### if the data was already, jump an iteration
if(file.exists(paste0("dec_corpus/md_", corpus_id, "csv")) == FALSE){
## check the internet conection, and wait if it is weak. If not, just parse the HTML page
con_test <- try(parsed_case_page <- case_page %>%
read_html(), silent = TRUE)
# if true, weak connection...wait 1 minute, and then reconnect and parse the HTML page
if(class(con_test) == "try-error") {
print("reconecting in 1 minute!")
Sys.sleep(60)
parsed_case_page <- case_page %>%
read_html()
}
### scrape the case details table
md_table <- try(parsed_case_page %>%
html_node(xpath = "//table") %>%
html_table(fill = TRUE) %>%
as_tibble() %>%
filter(str_detect(X1, "\\:$")) %>%
t() %>%
as_tibble() %>%
set_names(.,
nm = .[1,] %>%
str_replace_all(., "[[:punct:]]|º", "") %>%
str_to_lower() %>%
str_replace_all(., "\\s+", "_")) %>%
slice(2) %>%
mutate_all(funs(str_replace_all(., "[[:cntrl:]]", "; "))) %>%
mutate(proc = proc,
case_page = case_page) %>%
select(., one_of(c("processo",
"relator",
"data_do_acordão",
"data_do_acordao",
"tribunal_recorrido",
"tribunal_recurso",
"data_dec_recorrida",
"área_tematica",
"área_temática",
"area-+_tematica",
"descritores",
"meio_processual",
"legislação_nacional",
"legislaçao_nacional",
"jurisprudência_nacional",
"jurisprudencia_nacional",
"decisão",
"decisao",
"votação",
"votaçao",
"votacão",
"votacao",
"n_convencional",
"sumário",
"sumario",
"privacidade",
"n_do_documento",
"reclamações",
"reclamacões",
"reclamaçoes",
"reclamacoes",
"indicações_eventuais",
"indicaçoes_eventuais",
"indicacoes_eventuais",
"indicacões_eventuais",
"processo_no_tribunal_recorrido"))),
silent = TRUE)
## if md_table is empty, assign NA
if(class(md_table) == "try-error" ||is_empty(md_table) || ncol(md_table) < 2){
md_table <- NA_character_
}
### Next, we get the integral or partial decisions, when existing. If not, assign NA
### partial
decisao_texto_parcial <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Parcial')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_parcial <- ifelse(is_empty(decisao_texto_parcial) || nchar(decisao_texto_parcial) < 5,
NA_character_,
decisao_texto_parcial)
### integral
decisao_texto_integral <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Integral')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_integral <- ifelse(is_empty(decisao_texto_integral) || nchar(decisao_texto_integral) < 5,
NA_character_,
decisao_texto_integral)
#### categorical variable for the decision
md_table$decisao_disponivel <- if_else(!is.na(decisao_texto_integral),
"texto integral",
if_else(!is.na(decisao_texto_parcial),
"texto parcial",
"texto nao disponivel"))
### assign corpus id to the dataset
md_table$corpus_id <- paste0("dec_corpus/dec_", corpus_id, "txt")
### store the decision text in the corpus
if(md_table$decisao_disponivel == "texto integral"){
cat(decisao_texto_integral,
file = paste0("dec_corpus/dec_", corpus_id, "txt"))
} else if(md_table$decisao_disponivel == "texto parcial"){
cat(decisao_texto_integral,
file = paste0("dec_corpus/dec_", corpus_id, "txt"))
} else {
cat("Decisao nao publicada",
file = paste0("dec_corpus/dec_", corpus_id, "txt"))
}
#### Export the metadata table as .csv
write.csv(md_table,
fileEncoding = "UTF-8",
row.names = FALSE,
file = paste0("dec_corpus/md_", corpus_id, "csv"))
# rest time for the server
Sys.sleep(sample(1:6, 1))
} else {
cat("\n---> already parsed and saved!\n")
}
})
main_dir <- getwd()
setwd(paste0(main_dir, "/getAndClean"))
### loading the relevant packages
library(tidyverse)
library(rvest)
library(openxlsx)
library(lubridate)
library(RSelenium)
library(data.table)
map2(metadata_rel$case_page, metadata_rel$proc, function(case_page, proc){
#### Generate a corpus id
corpus_id <- paste0(str_extract(case_page, "(?<=pt\\/).*?(?=\\.nsf)"),
"_",
str_replace_all(proc, "[[:punct:]]", "_"),
".")
## start
cat(paste0("\n", "scraping case ", proc, "\n"))
### if the data was already, jump an iteration
if(file.exists(paste0("dec_corpus/md_", corpus_id, "csv")) == FALSE){
## check the internet conection, and wait if it is weak. If not, just parse the HTML page
con_test <- try(parsed_case_page <- case_page %>%
read_html(), silent = TRUE)
# if true, weak connection...wait 1 minute, and then reconnect and parse the HTML page
if(class(con_test) == "try-error") {
print("reconecting in 1 minute!")
Sys.sleep(60)
parsed_case_page <- case_page %>%
read_html()
}
### scrape the case details table
md_table <- try(parsed_case_page %>%
html_node(xpath = "//table") %>%
html_table(fill = TRUE) %>%
as_tibble() %>%
filter(str_detect(X1, "\\:$")) %>%
t() %>%
as_tibble() %>%
set_names(.,
nm = .[1,] %>%
str_replace_all(., "[[:punct:]]|º", "") %>%
str_to_lower() %>%
str_replace_all(., "\\s+", "_")) %>%
slice(2) %>%
mutate_all(funs(str_replace_all(., "[[:cntrl:]]", "; "))) %>%
mutate(proc = proc,
case_page = case_page) %>%
select(., one_of(c("processo",
"relator",
"data_do_acordão",
"data_do_acordao",
"tribunal_recorrido",
"tribunal_recurso",
"data_dec_recorrida",
"área_tematica",
"área_temática",
"area-+_tematica",
"descritores",
"meio_processual",
"legislação_nacional",
"legislaçao_nacional",
"jurisprudência_nacional",
"jurisprudencia_nacional",
"decisão",
"decisao",
"votação",
"votaçao",
"votacão",
"votacao",
"n_convencional",
"sumário",
"sumario",
"privacidade",
"n_do_documento",
"reclamações",
"reclamacões",
"reclamaçoes",
"reclamacoes",
"indicações_eventuais",
"indicaçoes_eventuais",
"indicacoes_eventuais",
"indicacões_eventuais",
"processo_no_tribunal_recorrido"))),
silent = TRUE)
## if md_table is empty, assign NA
if(class(md_table) == "try-error" ||is_empty(md_table) || ncol(md_table) < 2){
md_table <- NA_character_
}
### Next, we get the integral or partial decisions, when existing. If not, assign NA
### partial
decisao_texto_parcial <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Parcial')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_parcial <- ifelse(is_empty(decisao_texto_parcial) || nchar(decisao_texto_parcial) < 5,
NA_character_,
decisao_texto_parcial)
### integral
decisao_texto_integral <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Integral')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_integral <- ifelse(is_empty(decisao_texto_integral) || nchar(decisao_texto_integral) < 5,
NA_character_,
decisao_texto_integral)
#### categorical variable for the decision
md_table$decisao_disponivel <- if_else(!is.na(decisao_texto_integral),
"texto integral",
if_else(!is.na(decisao_texto_parcial),
"texto parcial",
"texto nao disponivel"))
### assign corpus id to the dataset
md_table$corpus_id <- paste0("dec_corpus/dec_", corpus_id, "txt")
### store the decision text in the corpus
if(md_table$decisao_disponivel == "texto integral"){
cat(decisao_texto_integral,
file = paste0("dec_corpus/dec_", corpus_id, "txt"))
} else if(md_table$decisao_disponivel == "texto parcial"){
cat(decisao_texto_integral,
file = paste0("dec_corpus/dec_", corpus_id, "txt"))
} else {
cat("Decisao nao publicada",
file = paste0("dec_corpus/dec_", corpus_id, "txt"))
}
#### Export the metadata table as .csv
write.csv(md_table,
fileEncoding = "UTF-8",
row.names = FALSE,
file = paste0("dec_corpus/md_", corpus_id, "csv"))
# rest time for the server
Sys.sleep(sample(1:6, 1))
} else {
cat("\n---> already parsed and saved!\n")
}
})
q()
main_dir <- getwd()
setwd(paste0(main_dir, "/getAndClean"))
### loading the relevant packages
library(tidyverse)
library(rvest)
library(openxlsx)
library(lubridate)
library(RSelenium)
library(data.table)
map2(metadata_rel$case_page, metadata_rel$proc, function(case_page, proc){
#### Generate a corpus id
corpus_id <- paste0(str_extract(case_page, "(?<=pt\\/).*?(?=\\.nsf)"),
"_",
str_replace_all(proc, "[[:punct:]]", "_"),
".")
## start
cat(paste0("\n", "scraping case ", proc, "\n"))
### if the data was already, jump an iteration
if(file.exists(paste0("dec_corpus/md_", corpus_id, "csv")) == FALSE){
## check the internet conection, and wait if it is weak. If not, just parse the HTML page
con_test <- try(parsed_case_page <- case_page %>%
read_html(), silent = TRUE)
# if true, weak connection...wait 1 minute, and then reconnect and parse the HTML page
if(class(con_test) == "try-error") {
print("reconecting in 1 minute!")
Sys.sleep(60)
parsed_case_page <- case_page %>%
read_html()
}
### scrape the case details table
md_table <- try(parsed_case_page %>%
html_node(xpath = "//table") %>%
html_table(fill = TRUE) %>%
as_tibble() %>%
filter(str_detect(X1, "\\:$")) %>%
t() %>%
as_tibble() %>%
set_names(.,
nm = .[1,] %>%
str_replace_all(., "[[:punct:]]|º", "") %>%
str_to_lower() %>%
str_replace_all(., "\\s+", "_")) %>%
slice(2) %>%
mutate_all(funs(str_replace_all(., "[[:cntrl:]]", "; "))) %>%
mutate(proc = proc,
case_page = case_page) %>%
select(., one_of(c("processo",
"relator",
"data_do_acordão",
"data_do_acordao",
"tribunal_recorrido",
"tribunal_recurso",
"data_dec_recorrida",
"área_tematica",
"área_temática",
"area-+_tematica",
"descritores",
"meio_processual",
"legislação_nacional",
"legislaçao_nacional",
"jurisprudência_nacional",
"jurisprudencia_nacional",
"decisão",
"decisao",
"votação",
"votaçao",
"votacão",
"votacao",
"n_convencional",
"sumário",
"sumario",
"privacidade",
"n_do_documento",
"reclamações",
"reclamacões",
"reclamaçoes",
"reclamacoes",
"indicações_eventuais",
"indicaçoes_eventuais",
"indicacoes_eventuais",
"indicacões_eventuais",
"processo_no_tribunal_recorrido"))),
silent = TRUE)
## if md_table is empty, assign NA
if(class(md_table) == "try-error" ||is_empty(md_table) || ncol(md_table) < 2){
md_table <- NA_character_
}
### Next, we get the integral or partial decisions, when existing. If not, assign NA
### partial
decisao_texto_parcial <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Parcial')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_parcial <- ifelse(is_empty(decisao_texto_parcial) || nchar(decisao_texto_parcial) < 5,
NA_character_,
decisao_texto_parcial)
### integral
decisao_texto_integral <- try(parsed_case_page %>%
html_nodes(xpath = "//td[preceding-sibling::td/b/font[contains(text(), 'o Texto Integral')]]") %>%
html_text(),
silent = TRUE)
decisao_texto_integral <- ifelse(is_empty(decisao_texto_integral) || nchar(decisao_texto_integral) < 5,
NA_character_,
decisao_texto_integral)
#### categorical variable for the decision
md_table$decisao_disponivel <- if_else(!is.na(decisao_texto_integral),
"texto integral",
if_else(!is.na(decisao_texto_parcial),
"texto parcial",
"texto nao disponivel"))
### assign corpus id to the dataset
md_table$corpus_id <- paste0("dec_corpus/dec_", corpus_id, "txt")
### store the decision text in the corpus
if(md_table$decisao_disponivel == "texto integral"){
cat(decisao_texto_integral,
file = paste0("dec_corpus/dec_", corpus_id, "txt"))
} else if(md_table$decisao_disponivel == "texto parcial"){
cat(decisao_texto_integral,
file = paste0("dec_corpus/dec_", corpus_id, "txt"))
} else {
cat("Decisao nao publicada",
file = paste0("dec_corpus/dec_", corpus_id, "txt"))
}
#### Export the metadata table as .csv
write.csv(md_table,
fileEncoding = "UTF-8",
row.names = FALSE,
file = paste0("dec_corpus/md_", corpus_id, "csv"))
# rest time for the server
Sys.sleep(sample(1:6, 1))
} else {
cat("\n---> already parsed and saved!\n")
}
})
q()
